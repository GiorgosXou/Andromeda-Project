/*
 * Copyright 2009 Google Inc.
 * Lu Chengwei 2013, VB4A
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.devtools.simple.runtime.components.impl.android;

import com.google.devtools.simple.runtime.android.ApplicationImpl;
import com.google.devtools.simple.runtime.components.ComponentContainer;
import com.google.devtools.simple.runtime.components.ContactReader;
import com.google.devtools.simple.runtime.components.impl.ComponentImpl;

import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;

import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Vibrator;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.Intent;
import android.os.Bundle;
import android.telephony.PhoneNumberUtils;
import android.telephony.gsm.SmsManager; 
import android.telephony.TelephonyManager;  
import android.widget.Toast; 

import android.provider.ContactsContract;  
import android.provider.ContactsContract.CommonDataKinds.Phone;  
import android.provider.ContactsContract.CommonDataKinds.Photo;  
import android.content.ContentResolver;  
import android.content.ContentUris;  
import android.content.Context;  
import android.content.Intent;  
import android.database.Cursor;  
import android.graphics.Bitmap;  
import android.graphics.BitmapFactory;  
import android.net.Uri;  

import java.util.ArrayList; 
import java.io.BufferedReader;  
import java.io.BufferedWriter;  
import java.io.InputStreamReader;  
import java.io.OutputStreamWriter;  
import java.io.PrintWriter;  
import java.net.Socket;  
import java.io.IOException;  
import java.io.InputStream;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;
/**
 * Implementation of phone related functions.
 * 
 * @author Herbert Czymontek
 */
public final class ContactReaderImpl extends ComponentImpl implements ContactReader {

  public ContactReaderImpl(ComponentContainer container) {
    super(container);
  }

  @Override
  public boolean Available() {
    return true;
  }

  @Override
  public void Call(String phoneNumber) {
    if (null != phoneNumber && phoneNumber.length() > 0) {
      ApplicationImpl.getContext().startActivity(new Intent(Intent.ACTION_CALL,
          Uri.parse("tel:" + phoneNumber)));
    }
  }

  @Override
  public void SendSMS(String phoneNumber,String text,String warnings) {
	    
		if (null != phoneNumber && phoneNumber.length() > 0) {
			SmsManager smsManager = SmsManager.getDefault(); 
			ArrayList<String> msgs=smsManager.divideMessage(text);
			smsManager.sendMultipartTextMessage(phoneNumber, null, msgs, null, null);
			if (warnings=="")
			{
				warnings="SMS has been sent to "+phoneNumber+".";
			}
			Toast.makeText(ApplicationImpl.getContext(), warnings,Toast.LENGTH_SHORT).show();
    }
  }


  @Override
  public void SendMail(String Address, String mailtitle, String mailtext) {
	    Intent data=new Intent(Intent.ACTION_SENDTO);  
        data.setData(Uri.parse("mailto:"+Address));  
        data.putExtra(Intent.EXTRA_SUBJECT, mailtitle);  
        data.putExtra(Intent.EXTRA_TEXT, mailtext);  
        ApplicationImpl.getContext().startActivity(data); 
  }

  public static byte[] readFromInput(InputStream inStream) throws Exception {
    ByteArrayOutputStream outStream = new ByteArrayOutputStream();
    byte[] buffer = new byte[1024];
    int len = 0;
    while ((len = inStream.read(buffer)) != -1) {
      outStream.write(buffer, 0, len);
    }
    inStream.close();
    return outStream.toByteArray();
  }
  
  @Override
  public String VB4APost(String url, String params, int Ctimeout, int Rtimeout,String charset) {
    String str = "";
    try {
      URL url2 = new URL(url);
      HttpURLConnection conn = (HttpURLConnection)url2.openConnection();
      conn.setRequestMethod("POST");
      conn.setConnectTimeout(Ctimeout);
      conn.setReadTimeout(Rtimeout);
      conn.setDoOutput(true);
      byte[] bypes = params.toString().getBytes();
      conn.getOutputStream().write(bypes);
      InputStream inStream = conn.getInputStream();
      byte[] data = readFromInput(inStream);
      str = new String(data, charset);
    } catch (Exception e) {
      return "empty";
    }
    return str;
  }
  
  @Override
  public String VB4AGet(String url,String codec) {
	return GetURL(url,codec);
  }

  @Override
  public String GetURL(String url,String codec) {
	URL url2;
	int responsecode;
	HttpURLConnection urlConnection=null;
    BufferedReader reader;
    String line;
	String urlCode;
	urlCode="";
	try{
            //生成一个URL对象，要获取源代码的网页地址为：http://www.sina.com.cn
            url2=new URL(url);
            //打开URL
            urlConnection = (HttpURLConnection)url2.openConnection();
            //获取服务器响应代码
            responsecode=urlConnection.getResponseCode();
            if(responsecode==200){
                //得到输入流，即获得了网页的内容 
                reader=new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),codec));
                while((line=reader.readLine())!=null){
                    urlCode=urlCode+line+"\n";
                }
				
            }
            else{
                urlCode="Respond:"+responsecode;
            }
        }
        catch(Exception e){
            urlCode="Error!";
        }
		urlConnection.disconnect();
		return urlCode;
    }

	

/*
  public String VB4APost(String pathUrl, String data) {
	try
	{
		URL url = new URL(pathURL);
		HttpURLConnection httpConn=(HttpURLConnection)url.openConnection();
		 httpConn.setDoOutput(true);//使用 URL 连接进行输出
		 httpConn.setDoInput(true);//使用 URL 连接进行输入
		 httpConn.setUseCaches(false);//忽略缓存
		 httpConn.setRequestMethod("POST");//设置URL请求方法
		 String requestString = data;
     //设置请求属性
    //获得数据字节数据，请求数据流的编码，必须和下面服务器端处理请求流的编码一致
          byte[] requestStringBytes = requestString.getBytes(ENCODING_UTF_8);
          httpConn.setRequestProperty("Content-length", "" + requestStringBytes.length);
          httpConn.setRequestProperty("Content-Type", "application/octet-stream");
          httpConn.setRequestProperty("Connection", "Keep-Alive");// 维持长连接
          httpConn.setRequestProperty("Charset", "UTF-8");
          //
          String name=URLEncoder.encode("黄武艺","utf-8");
          httpConn.setRequestProperty("NAME", name);
          
          //建立输出流，并写入数据
          OutputStream outputStream = httpConn.getOutputStream();
          outputStream.write(requestStringBytes);
          outputStream.close();
         //获得响应状态
          int responseCode = httpConn.getResponseCode();
          if(HttpURLConnection.HTTP_OK == responseCode){//连接成功
           
           //当正确响应时处理数据
           StringBuffer sb = new StringBuffer();
              String readLine;
              BufferedReader responseReader;
             //处理响应流，必须与服务器响应流输出的编码一致
              responseReader = new BufferedReader(new InputStreamReader(httpConn.getInputStream(), ENCODING_UTF_8));
              while ((readLine = responseReader.readLine()) != null) {
               sb.append(readLine).append("/n");
              }
              responseReader.close();
              return sb.toString();

	}
	catch (Exception ex)
	{
		ex.printStackTrace();
	}



  }
*/

  @Override
  public String SocketSend(String ip,int port,String data) {
	Socket s=null;
	BufferedReader din = null;  
    PrintWriter dout = null;  
	String str="";
	String str2="";
	try{
		s=new Socket(ip,port);
		s.setSoTimeout(5000);
		din = new BufferedReader(new InputStreamReader(s.getInputStream()));  
        dout = new PrintWriter(new BufferedWriter(new OutputStreamWriter(s.getOutputStream()))); 
		dout.println(data);
		dout.flush();
		while ((str = din.readLine()) != null) {
        str2=str2+str+"\n";
		}

		} catch (Exception e) {  
            //e.printStackTrace(); 
			return "Null";
        } finally {  
            try {  
                din.close();  
                dout.close();  
                s.close();  
            } catch (IOException e) {  
                //e.printStackTrace();  
				return "Null";
            }  
        }  
		return str2;
  }

  @Override
  public void JumpURL(String url) {
	Uri uri = Uri.parse(url);  
	Intent it = new Intent(Intent.ACTION_VIEW, uri);  
    ApplicationImpl.getContext().startActivity(it);
  }

  @Override
  public void Vibrate(int duration) {
    vibrator.vibrate(duration);
  }
/*
  @Override
  public String GetIMEI() {
	TelephonyManager tele = (TelephonyManager) ApplicationImpl.getContext().getSystemService(Context.TELEPHONY_SERVICE);
	return tele.getDeviceId();
  }
 */
 
  public String[][] GetContacts() {
	//http://blog.csdn.net/xys289187120/article/details/6730957
  
	ContentResolver resolver = mContext.getContentResolver();  
    Cursor phoneCursor = resolver.query(Phone.CONTENT_URI,PHONES_PROJECTION, null, null, null);  
  
  
    if (phoneCursor != null) {  
        while (phoneCursor.moveToNext()) {  
  
        //得到手机号码  
        String phoneNumber = phoneCursor.getString(PHONES_NUMBER_INDEX);  
        //当手机号码为空的或者为空字段 跳过当前循环  
        if (TextUtils.isEmpty(phoneNumber))  
            continue;  
          
        //得到联系人名称  
        String contactName = phoneCursor.getString(PHONES_DISPLAY_NAME_INDEX);  
          
        //得到联系人ID  
        Long contactid = phoneCursor.getLong(PHONES_CONTACT_ID_INDEX);  
  
        //得到联系人头像ID  
        Long photoid = phoneCursor.getLong(PHONES_PHOTO_ID_INDEX);  
          
        //得到联系人头像Bitamp  
        Bitmap contactPhoto = null;  
  
        //photoid 大于0 表示联系人有头像 如果没有给此人设置头像则给他一个默认的  
        if(photoid > 0 ) {  
            Uri uri =ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI,contactid);  
            InputStream input = ContactsContract.Contacts.openContactPhotoInputStream(resolver, uri);  
            contactPhoto = BitmapFactory.decodeStream(input);  
        }else {  
            contactPhoto = BitmapFactory.decodeResource(getResources(), R.drawable.contact_photo);  
        }  
          
        mContactsName.add(contactName);  
        mContactsNumber.add(phoneNumber);  
        mContactsPhonto.add(contactPhoto);  
        }  
  
        phoneCursor.close();  
    }  
  }
}
